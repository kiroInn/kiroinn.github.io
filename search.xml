<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解谜RxJS操作符-转化</title>
      <link href="/2020/05/12/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BD%AC%E5%8C%96/"/>
      <url>/2020/05/12/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在RxJS中提供一些列transformation类的操作符,分两类</p><ul><li>映射数据-对每个数据做转化</li><li>数据重新组合</li></ul><table><thead><tr><th align="center">适用操作符</th><th align="center">功能需求</th></tr></thead><tbody><tr><td align="center">map</td><td align="center">将每个元素用<strong><em>映射</em></strong>函数产生新的数据</td></tr><tr><td align="center">mapTo</td><td align="center">将数据流中每个元素<strong><em>映射为同一个</em></strong>数据</td></tr><tr><td align="center">pluck</td><td align="center"><strong><em>提取</em></strong>数据流中每个数据的某个字段</td></tr><tr><td align="center">windowTime,windowCount,windowWhen,windowToggle,window</td><td align="center">产生高阶Observable对象</td></tr><tr><td align="center">bufferTime,bufferCount,bufferWhen,bufferToggle,buffer</td><td align="center">产生数组构成的数据流</td></tr><tr><td align="center">concatMap,mergeMap,switchMap,exhaustMap</td><td align="center">映射产生高阶Observable对象然后合并</td></tr><tr><td align="center">scan,mergeScan</td><td align="center">产生规约运算结果组成的数据流</td></tr></tbody></table><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>虽然与javascript的数组类型的map同名,但两者是有差异的:</p><ul><li>相同点-接受一个函数(project)作为参数,指定了数据映射的逻辑。</li><li>不同点-接受一个可选参数thisArg,用于指定函数project执行时的this值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; of(3,1,4)</span><br><span class="line">const context &#x3D; &#123;separator: &#39;::&#39;&#125;;</span><br><span class="line">const mapFunc &#x3D; (function(separator) &#123;</span><br><span class="line">    return function(value, index) &#123;</span><br><span class="line">    return &#96;$&#123;value&#125; $&#123;separator&#125; $&#123;index&#125;&#96;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(context.separator)</span><br><span class="line">source$.map(mapFunc, context)</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3 :: 0, 1 :: 1, 4 :: 2</text><text x="0" y="-18" style="font-size: 10px; dominant-baseline: text-after-edge;">×3</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 22 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></li></ul><h2 id="mapTo"><a href="#mapTo" class="headerlink" title="mapTo"></a>mapTo</h2><p>本质就是简化版map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.mapTo &#x3D; function(value) &#123;</span><br><span class="line">    return this.map(x &#x3D;&gt; value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pluck"><a href="#pluck" class="headerlink" title="pluck"></a>pluck</h2><p>含义为”拔”,把上游数据中特定字段的值”拔”出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; of(</span><br><span class="line">    &#123;name: &quot;RxJS&quot;, version: &quot;v1&quot;&#125;,</span><br><span class="line">    &#123;name: &quot;React&quot;, version: &quot;v2&quot;&#125;,</span><br><span class="line">    &#123;name: &quot;Angular&quot;, version: &quot;v3&quot;&#125;,</span><br><span class="line">    &#123;name: &quot;Vue&quot;, version: &quot;v4&quot;&#125;,</span><br><span class="line">)</span><br><span class="line">source$.pluck(&#39;name&#39;, &#39;defaultName&#39;)</span><br></pre></td></tr></table></figure><p><svg width="420" height="97.328125" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">…</text><text x="0" y="-18" style="font-size: 10px; dominant-baseline: text-after-edge;">×4</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 22 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"><g style="transform: translate(-69.8203px, 64px) scale(1); transform-origin: 90.8203px -8px; opacity: 1; transition: opacity 0.3s ease-in-out 0s, transform 0.3s ease-in-out 0s;"><path d="M0,4A4,4,0,0,1,3.9999999999999996,0L84.8203125,0L90.8203125,-8L96.8203125,0L177.640625,0A4,4,0,0,1,181.640625,3.9999999999999996L181.640625,29.328125A4,4,0,0,1,177.640625,33.328125L4,33.328125A4,4,0,0,1,0,29.328125Z" fill="rgba(50, 50, 50, 0.97)"/><text style="dominant-baseline: text-before-edge; font-size: 12px; font-family: Arial, sans-serif; fill: rgb(255, 255, 255);"><tspan x="20" dy="10">RxJS, React, Angular, Vue</tspan></text></g></g></svg></p><h2 id="缓存窗口：无损回压控制"><a href="#缓存窗口：无损回压控制" class="headerlink" title="缓存窗口：无损回压控制"></a>缓存窗口：无损回压控制</h2><p>我们可以利用过滤类操作符进行回压控制，不过过滤类操作符的回压控制属于”有损”控制</p><ul><li>有损回压-舍弃一些数据</li><li>无损回压-在一段时间内产生的数据放到一个数据集合里</li></ul><h3 id="回压的仓库-数据集合"><a href="#回压的仓库-数据集合" class="headerlink" title="回压的仓库-数据集合"></a>回压的仓库-数据集合</h3><ul><li>支持数组的以buffer开头</li><li>支持Observable对象的以window开头</li></ul><h3 id="无损回压原理"><a href="#无损回压原理" class="headerlink" title="无损回压原理"></a>无损回压原理</h3><p>当上游数据传来是，会把多个上游数据缓存到数组或Observable对象传给下游。</p><h2 id="windowTime"><a href="#windowTime" class="headerlink" title="windowTime"></a>windowTime</h2><p>缓存上游数据,参数只有一个,指定产生缓冲窗口的间隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; timer(0, 100)</span><br><span class="line">source$.windowTime(400)</span><br></pre></td></tr></table></figure><p><svg width="413.6000061035156" height="219" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="21" y1="37" x2="21" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="191.21449160427517" y1="37" x2="191.21449160427517" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="361.216427649604" y1="37" x2="361.216427649604" y2="193" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 277 --><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(170.214px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(340.216px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 22 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 279 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="170.1294693806966" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="170.1294693806966" y1="11" x2="170.1294693806966" y2="41" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0.0425111px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0</text></g><g style="transform: translate(42.7237px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1</text></g><g style="transform: translate(85.1923px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">2</text></g><g style="transform: translate(127.746px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">3</text></g></g><!-- react-empty: 286 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 948 --><g transform="translate(21, 0)"><line x1="170.21449160427517" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="170.21449160427517" y1="26" x2="340.17391653781465" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="340.17391653781465" y1="11" x2="340.17391653781465" y2="41" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(170.257px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">4</text></g><g style="transform: translate(212.683px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">5</text></g><g style="transform: translate(255.194px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">6</text></g><g style="transform: translate(297.705px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">7</text></g></g><!-- react-empty: 955 --></g></g><g transform="translate(0, 167)"><!-- react-empty: 973 --><g transform="translate(21, 0)"><line x1="340.216427649604" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#767676" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 978 --><g><g style="transform: translate(340.429px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">8</text></g></g><!-- react-empty: 980 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="bufferTime"><a href="#bufferTime" class="headerlink" title="bufferTime"></a>bufferTime</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; timer(0, 1000)</span><br><span class="line">source$.pipe(bufferTime(4000))</span><br></pre></td></tr></table></figure><p><svg width="413.6000061035156" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 277 --><g><g style="transform: translate(170.257px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0,1,2,3</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(340.174px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4,5,6,7</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 22 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="windowToggle"><a href="#windowToggle" class="headerlink" title="windowToggle"></a>windowToggle</h2><p>利用Observable来控制缓冲窗口的开和关,两个参数</p><ol><li>opening$产生一个数据，代表一个缓冲窗口的开始</li><li>closingSelector,用来获取缓冲窗口结束<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; timer(0, 1000)</span><br><span class="line">const opening$ &#x3D; timer(0, 4000)</span><br><span class="line">const closingSelector &#x3D; value &#x3D;&gt; value % 2 &#x3D;&#x3D;&#x3D; 0 ? timer(2000) : timer(1000)</span><br><span class="line">source$.pipe(opening$, closingSelector)</span><br></pre></td></tr></table></figure><svg width="413.6000061035156" height="219" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="21.170044447157117" y1="37" x2="21.170044447157117" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="191.29951382785373" y1="37" x2="191.29951382785373" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="361.3439609849718" y1="37" x2="361.3439609849718" y2="193" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 277 --><g><g style="transform: translate(0.170044px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(170.3px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(340.344px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 22 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 1070 --><g transform="translate(21, 0)"><line x1="0.17004444715711806" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="0.17004444715711806" y1="26" x2="85.23477913750543" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="85.23477913750543" y1="11" x2="85.23477913750543" y2="41" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0.212556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0</text></g><g style="transform: translate(42.8087px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1</text></g></g><!-- react-empty: 1077 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 1089 --><g transform="translate(21, 0)"><line x1="170.29951382785373" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="170.29951382785373" y1="26" x2="212.93815895250108" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="212.93815895250108" y1="3.5" x2="212.93815895250108" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(170.385px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">4</text></g><g style="transform: translate(212.896px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">5</text></g></g><!-- react-empty: 1096 --></g></g><g transform="translate(0, 167)"><!-- react-empty: 1108 --><g transform="translate(21, 0)"><line x1="340.3439609849718" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#767676" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 1113 --><g><g style="transform: translate(340.429px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">8</text></g></g><!-- react-empty: 1115 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></li></ol><h2 id="高阶map"><a href="#高阶map" class="headerlink" title="高阶map"></a>高阶map</h2><p>普通map只是把一个数据映射为另一个数据<br>高阶map把一个数据映射为一个Observable对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(2000)</span><br><span class="line">const project &#x3D; (value, index) &#x3D;&gt; &#123;</span><br><span class="line">    interval(1000).take(5)</span><br><span class="line">&#125;</span><br><span class="line">source$.pipe(map(project))</span><br></pre></td></tr></table></figure><p><svg width="413.6000061035156" height="271" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="106.10724580213758" y1="37" x2="106.10724580213758" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="191.1294693806966" y1="37" x2="191.1294693806966" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="276.1091818474664" y1="37" x2="276.1091818474664" y2="193" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="361.13140542602537" y1="37" x2="361.13140542602537" y2="245" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 277 --><g><g style="transform: translate(85.1072px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(170.129px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(255.109px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(340.131px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 1134 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 1139 --><g transform="translate(21, 0)"><line x1="85.10724580213758" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="85.10724580213758" y1="26" x2="298.0028936428494" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="298.00289364284936" y1="3.5" x2="298.00289364284936" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(127.831px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0</text></g><g style="transform: translate(170.214px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1</text></g><g style="transform: translate(212.896px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">2</text></g><g style="transform: translate(255.279px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">3</text></g><g style="transform: translate(297.96px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">4</text></g></g><!-- react-empty: 1146 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 1154 --><g transform="translate(21, 0)"><line x1="170.1294693806966" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#767676" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 1159 --><g><g style="transform: translate(212.811px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0</text></g><g style="transform: translate(255.237px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1</text></g><g style="transform: translate(297.875px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">2</text></g><g style="transform: translate(340.301px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">3</text></g></g><!-- react-empty: 1161 --></g></g><g transform="translate(0, 167)"><!-- react-empty: 1175 --><g transform="translate(21, 0)"><line x1="255.10918184746637" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#767676" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 1180 --><g><g style="transform: translate(297.833px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0</text></g><g style="transform: translate(340.259px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1</text></g></g><!-- react-empty: 1182 --></g></g><g transform="translate(0, 219)"><!-- react-empty: 1203 --><g transform="translate(21, 0)"><line x1="340.13140542602537" y1="26" x2="382.6000061035156" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(382.6000061035156, 21)" d="M0 0 L10 5 L0 10 z" fill="#767676" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 1208 --><g/><!-- react-empty: 1210 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>返回给下游的Observable可以使用RxJS提供的高阶map操作符</p><ul><li>concatMap</li><li>mergeMap</li><li>switchMap</li><li>exhaustMap</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员修炼之道</title>
      <link href="/2020/05/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/2020/05/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="务实的哲学"><a href="#务实的哲学" class="headerlink" title="务实的哲学"></a>务实的哲学</h1><ul><li>人生是你的</li><li>我的源码被猫吃了</li><li>软件的熵</li><li>石头做的汤和煮熟的青蛙</li><li>够好即可的软件</li><li>知识组合</li><li>交流<h1 id="务实的方法"><a href="#务实的方法" class="headerlink" title="务实的方法"></a>务实的方法</h1></li><li>优秀设计的精髓<ul><li>Easier To Change(ETC)</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解谜RxJS操作符-过滤</title>
      <link href="/2020/05/07/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BF%87%E6%BB%A4/"/>
      <url>/2020/05/07/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>当上游对象的吐出的数据，并不都是下游关心的，这时候就过滤操作符就派上用场了。</p><table><thead><tr><th align="center">适用操作符</th><th align="center">功能需求</th></tr></thead><tbody><tr><td align="center">filter</td><td align="center"><strong><em>过滤掉</em></strong>不满足判定条件的数据</td></tr><tr><td align="center">first</td><td align="center">获得满足判定条件的<strong><em>第一个</em></strong>数据</td></tr><tr><td align="center">last</td><td align="center">获得满足判定条件的<strong><em>最后一个</em></strong>数据</td></tr><tr><td align="center">take</td><td align="center">从数据流中<strong><em>选取</em></strong>最先出现的若干数据</td></tr></tbody></table><p>所有的过滤类操作符都有判定函数参数，此外，有的过滤操作符还可以接受一个”结果选择器”(result selector)。</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>过滤操作符，用法也比较简单，只能传判定函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(filter(x &#x3D;&gt; x % 2 &#x3D;&#x3D;&#x3D; 0))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 352 --><g><g style="transform: translate(48.8195px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(97.2986px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(145.972px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(194.597px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><g style="transform: translate(243.174px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g><g style="transform: translate(291.799px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">5</text></g><g style="transform: translate(340.424px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">6</text></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 352 --><g><g style="transform: translate(48.6736px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(145.875px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(243.125px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g><g style="transform: translate(340.375px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">6</text></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p>## firstfirst可传可不传判定函数，不传就取上游Observable吐出数据的第一个。并且还支持第三个参数，当没有匹配的数据，可以填入默认数据。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; of(3,1,4,5,9)</span><br><span class="line">source$.first(</span><br><span class="line">    x &#x3D;&gt; x &lt; 0,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0.048625" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 442 --><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">...</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><g style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"><line x1="-8.951375" y1="17" x2="9.048625" y2="35" stroke-width="2" stroke="#000000"/><line x1="-8.951375" y1="35" x2="9.048625" y2="17" stroke-width="2" stroke="#000000"/><rect x="-8.951375" y="17" width="18" height="18" fill="transparent"/></g></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg>当没有值时，会返回EmptyError: no elements in sequence## lastlast与first正好相反，过滤的事一个Observable中最后一个判定数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000).take(5)</span><br><span class="line">source$.last(x &gt; x % 2 &#x3D;&#x3D;&#x3D; 0)</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="194.6167" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="194.61669999999998" y1="3.5" x2="194.61669999999998" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(194.539px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g></g><!-- react-empty: 496 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><h2 id="take"><a href="#take" class="headerlink" title="take"></a>take</h2><p>take意为”拿”，从上游Observable拿数据，参数决定需要拿多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(take(3))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="233.6334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="233.6334" y1="3.5" x2="233.6334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(78.0334px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(155.678px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(233.556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g></g><!-- react-empty: 496 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h2><p>在RxJS中，takeUntil是一个里程碑式的过滤操作符<br>它可以让我们用Observable对象来控制另一个Observable对象的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">const notifier$ &#x3D; timer(2500)</span><br><span class="line">const takeUntil$ &#x3D; takeUntil(notifier$)</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="243.125" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="243.125" y1="11" x2="243.125" y2="41" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(97.3472px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(194.5px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g></g><!-- react-empty: 496 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h2><p>跳过前N个之后全拿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(take(5), skip(3))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.29633333333334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.29633333333334" y1="3.5" x2="324.29633333333334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(259.333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><g style="transform: translate(324.231px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g></g><!-- react-empty: 496 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="回压控制"><a href="#回压控制" class="headerlink" title="回压控制"></a>回压控制</h2><p>在RxJS的世界中，数据管道就像是现实世界的管道，数据就是现实中的液体或气体，如果数据管道中某一个环节处理数据的速度跟不上数据涌入的速度，又有无法把数据推送给下游，就会在缓冲区中挤压数据，这就相当于对上游施加了压力，这就是RxJS世界中的回压。<br>例如zip操作符就会产生</p><h3 id="有损回压控制"><a href="#有损回压控制" class="headerlink" title="有损回压控制"></a>有损回压控制</h3><p>回压这种现象的根源是数据管道中某个环节数据涌入的速度大于处理速度，<br>当处理不过来的时候，选择了舍弃掉一些涌入的数据，就叫有损回压控制<br>RxJS提供一系列操作符来实现有损回压控制</p><ul><li>throttle(Time)</li><li>debounce</li><li>audit(Time)</li><li>sample(Time)<h2 id="throttleTime"><a href="#throttleTime" class="headerlink" title="throttleTime"></a>throttleTime</h2>throttleTime可以意为”节流”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(</span><br><span class="line">    take(5),</span><br><span class="line">    throttleTime(2000)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.29633333333334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.29633333333334" y1="3.5" x2="324.29633333333334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(64.8333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(129.732px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(194.63px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(259.333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><g style="transform: translate(324.296px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.1666666666667" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.1666666666667" y1="11" x2="324.1666666666667" y2="41" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(65.0278px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(259.463px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><h2 id="debounceTime"><a href="#debounceTime" class="headerlink" title="debounceTime"></a>debounceTime</h2>debounceTime可以意为”去抖动”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(</span><br><span class="line">    take(5),</span><br><span class="line">    debounceTime(2000)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.29633333333334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.29633333333334" y1="3.5" x2="324.29633333333334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(64.8333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(129.732px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(194.63px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(259.333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><g style="transform: translate(324.296px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.3611666666667" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.36116666666663" y1="3.5" x2="324.36116666666663" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(324.231px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>如果没有take(5)是不会产生如何数据，因为debounce必须等上游不产生数据才开始工作<h2 id="auditTIme"><a href="#auditTIme" class="headerlink" title="auditTIme"></a>auditTIme</h2>audit意为”审计”，与throttle做的是类似的工作，throttle把第一个数据传给下游，audit是把最后一个数据传给下游。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; interval(1000)</span><br><span class="line">source$.pipe(</span><br><span class="line">    take(5),</span><br><span class="line">    auditTime(2000)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.29633333333334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.29633333333334" y1="3.5" x2="324.29633333333334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(64.963px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(129.796px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(194.63px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(259.398px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><g style="transform: translate(324.231px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4</text></g><text>origin</text></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.1666666666667" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.1666666666667" y1="11" x2="324.1666666666667" y2="41" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(64.8982px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(259.333px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g><text>throttle</text></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 489 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.2315" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.2315" y1="11" x2="324.2315" y2="41" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(194.694px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><text>audit</text></g><!-- react-empty: 697 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>过滤操作符在RxJS中扮演很重要的角色，相当于交通警察，哪些数据可以通行，哪些不行都是通过过滤操作符。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解谜RxJS操作符-辅助</title>
      <link href="/2020/05/07/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BE%85%E5%8A%A9/"/>
      <url>/2020/05/07/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E8%BE%85%E5%8A%A9/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">适用操作符</th><th align="center">功能需求</th></tr></thead><tbody><tr><td align="center">count</td><td align="center"><strong><em>统计</em></strong>数据流中产生的所有个数</td></tr><tr><td align="center">max、min</td><td align="center">获得数据流中<strong><em>最大</em></strong>或<strong><em>最小</em></strong>的数据</td></tr><tr><td align="center">reduce</td><td align="center">对数据流中所有数据进行<strong><em>规约</em></strong>操作</td></tr><tr><td align="center">every</td><td align="center">判断是否<strong><em>所有数据</em></strong>满足某个判定条件</td></tr><tr><td align="center">find、findIndex</td><td align="center"><strong><em>找到</em></strong>第一个满足判定条件的数据</td></tr><tr><td align="center">isEmpty</td><td align="center">判断一个数据流是否<strong><em>不包含任何数据</em></strong></td></tr><tr><td align="center">defaultIfEmpty</td><td align="center">如果一个数据流为空就<strong><em>默认产生一个指定数据</em></strong></td></tr></tbody></table><h2 id="count-统计数据个数"><a href="#count-统计数据个数" class="headerlink" title="count: 统计数据个数"></a>count: 统计数据个数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; timer(1000).pipe(</span><br><span class="line">concat(timer(1000))</span><br><span class="line">)</span><br><span class="line">source$.pipe(count())</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="260.11133333333333" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="260.11133333333333" y1="3.5" x2="260.11133333333333" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(129.796px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(259.852px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="259.7223333333333" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="259.7223333333333" y1="3.5" x2="259.7223333333333" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(259.593px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>值得注意的是count$只有在<strong><em>2秒钟之后</em></strong>才产生这个数据2</p><h2 id="max和min-最大最小值"><a href="#max和min-最大最小值" class="headerlink" title="max和min: 最大最小值"></a>max和min: 最大最小值</h2><p>max,min 的输入可以是纯数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">of(2,7,6,6,8,1).pipe(min())</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>也可以输入一个比较函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">of(</span><br><span class="line">    &#123;name: &#39;Jack&#39;, age: 20&#125;,</span><br><span class="line">    &#123;name: &#39;Mike&#39;, age: 10&#125;,</span><br><span class="line">    &#123;name: &#39;David&#39;, age: 30&#125;</span><br><span class="line">).pipe(</span><br><span class="line">    max((a,b) &#x3D;&gt; a.age - b.age),</span><br><span class="line">    map(item &#x3D;&gt; item.name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">David</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="reduce-规约统计"><a href="#reduce-规约统计" class="headerlink" title="reduce: 规约统计"></a>reduce: 规约统计</h2><p>如果需要对上游Observable吐出的数据进行更加复杂的统计运算，就可以使用reduce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range(1,20).pipe(</span><br><span class="line">    reduce((acc, current) &#x3D;&gt; acc + current,</span><br><span class="line">    0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">210</text></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>every属于条件布尔类操作符，其输出结果为一个而且唯一的布尔值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">of(2,3,4,5).pipe(every(x &#x3D;&gt; x &gt; 0))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">true</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">of(7,7,7,6,5,3).pipe(find(x &#x3D;&gt; x %2 &#x3D;&#x3D;&#x3D; 0))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">6</text></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h2><p>用于检测上游Observable对象是否为”空”<br>“空” = 没有吐出任何数据就完结的Observable对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interval(1000).pipe(isEmpty())</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="39.0556" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="39.0556" y1="3.5" x2="39.0556" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(38.9778px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">false</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty().pipe(isEmpty())</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">true</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="defaultIfEmpty"><a href="#defaultIfEmpty" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">empty().pipe(defaultIfEmpty(&#39;not empty&#39;))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 250 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="0" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="0" y1="3.5" x2="0" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">not empty</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 262 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p>]]></content>
      
      
      
        <tags>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解谜RxJS操作符-合并</title>
      <link href="/2020/04/29/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%90%88%E5%B9%B6/"/>
      <url>/2020/04/29/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">适用操作符</th><th align="center">功能需求</th></tr></thead><tbody><tr><td align="center">concat|concatAll</td><td align="center">以<strong><em>首尾相连</em></strong>的方式</td></tr><tr><td align="center">merge|mergeAll</td><td align="center">以<strong><em>先到先得</em></strong>的方式</td></tr><tr><td align="center">zip|zipAll</td><td align="center">以<strong><em>一一对应</em></strong>的方式</td></tr><tr><td align="center">combineLatest、combineAll、withLatestFrom</td><td align="center">持续合并多个数据流中最新产生的数据</td></tr><tr><td align="center">race</td><td align="center">选取<strong><em>第一个</em></strong>产生内容的数据流</td></tr><tr><td align="center">startWith</td><td align="center">在数据流前添加一个指定数据</td></tr><tr><td align="center">forkJoin</td><td align="center">只获取多个数据流<strong><em>最后产生</em></strong>的数据</td></tr><tr><td align="center">switch、exhaust</td><td align="center">从高阶数据流中<strong><em>切换</em></strong>数据源</td></tr></tbody></table><h2 id="concat-收尾相连"><a href="#concat-收尾相连" class="headerlink" title="concat:收尾相连"></a>concat:收尾相连</h2><p>能够把多个数组中的元素<strong>依次</strong>合并到一个数组中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source1$ &#x3D; timer(0,1000).pipe(take(5),map(x &#x3D;&gt; x + &#39;A&#39;));</span><br><span class="line">const source2$ &#x3D; timer(500,1000).pipe(take(5),map(x &#x3D;&gt; x + &#39;B&#39;));</span><br><span class="line">source1$.pipe(concat(source2$))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="292.3335" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="292.33349999999996" y1="3.5" x2="292.33349999999996" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0.1945px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0A</text></g><g style="transform: translate(97.4445px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1A</text></g><g style="transform: translate(194.792px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2A</text></g><g style="transform: translate(292.236px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3A</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="340.764" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="340.764" y1="3.5" x2="340.764" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(48.625px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0B</text></g><g style="transform: translate(146.264px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1B</text></g><g style="transform: translate(243.319px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2B</text></g><g style="transform: translate(340.57px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3B</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="361.88114285714283" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="361.88114285714283" y1="3.5" x2="361.88114285714283" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(0.222286px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0A</text></g><g style="transform: translate(55.9049px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1A</text></g><g style="transform: translate(111.476px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2A</text></g><g style="transform: translate(167.048px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3A</text></g><g style="transform: translate(194.945px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0B</text></g><g style="transform: translate(250.683px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1B</text></g><g style="transform: translate(306.199px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2B</text></g><g style="transform: translate(361.77px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3B</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="merge-先到先得快速通过"><a href="#merge-先到先得快速通过" class="headerlink" title="merge:先到先得快速通过"></a>merge:先到先得快速通过</h2><p>依次订阅上游Observable对象，把接收到的数据转给下游，等待所有上游对象Observable完结。<br>如果是同步数据流，表现与concat一致，应用<strong>异步数据流</strong>较好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source1$ &#x3D; timer(0,1000).pipe(map(x &#x3D;&gt; x + &#39;A&#39;));</span><br><span class="line">const source2$ &#x3D; timer(500,1000).pipe(map(x &#x3D;&gt; x + &#39;B&#39;));</span><br><span class="line">source1.pipe(merge(source2$));</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 749 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 754 --><g><g style="transform: translate(0.1556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0A</text></g><g style="transform: translate(78.1112px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1A</text></g><g style="transform: translate(155.833px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2A</text></g><g style="transform: translate(233.633px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3A</text></g><g style="transform: translate(311.356px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4A</text></g></g><!-- react-empty: 756 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 749 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 754 --><g><g style="transform: translate(38.9px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0B</text></g><g style="transform: translate(116.856px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1B</text></g><g style="transform: translate(194.656px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2B</text></g><g style="transform: translate(272.456px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3B</text></g><g style="transform: translate(350.256px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4B</text></g></g><!-- react-empty: 756 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 749 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 1398 --><g><g style="transform: translate(0.0778px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0A</text></g><g style="transform: translate(38.9px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0B</text></g><g style="transform: translate(77.9556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1A</text></g><g style="transform: translate(116.856px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1B</text></g><g style="transform: translate(155.756px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2A</text></g><g style="transform: translate(194.656px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2B</text></g><g style="transform: translate(233.556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3A</text></g><g style="transform: translate(272.533px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3B</text></g><g style="transform: translate(311.433px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4A</text></g><g style="transform: translate(350.178px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">4B</text></g></g><!-- react-empty: 756 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h2 id="zip-拉链式组合"><a href="#zip-拉链式组合" class="headerlink" title="zip:拉链式组合"></a>zip:拉链式组合</h2><p><img src="/2020/04/29/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%90%88%E5%B9%B6/zip.jpg" alt="zip"><br>zip的含义为<strong>“拉链”一对一的合并</strong>，zip只要给这完结的Observable对象吐出的所有数据找到配对的数据，那么zip就会给下游一个complete信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const timer$ &#x3D; interval(1000);</span><br><span class="line">const source1$ &#x3D; of(0,1,2,3);</span><br><span class="line">const source2$ &#x3D; of(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;);</span><br><span class="line">timer$.pipe(</span><br><span class="line">  zip(source1$, source2$),</span><br><span class="line">  map(([index, s1, s2]) &#x3D;&gt; &#96;$&#123;s1&#125;$&#123;s2&#125;&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 749 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="311.2" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="311.20000000000005" y1="3.5" x2="311.20000000000005" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(77.8778px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0a</text></g><g style="transform: translate(155.6px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1b</text></g><g style="transform: translate(233.322px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2c</text></g><g style="transform: translate(311.122px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3d</text></g></g><!-- react-empty: 756 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>当数据量较大的时候，多个数据流吐出数据不匹配时，会产生数据积压。</p><h2 id="combineLatest-合并最后一个数据"><a href="#combineLatest-合并最后一个数据" class="headerlink" title="combineLatest:合并最后一个数据"></a>combineLatest:合并最后一个数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source1$ &#x3D; timer(250,1000).pipe(take(4))</span><br><span class="line">const source2$ &#x3D; timer(750,1000).pipe(take(4))</span><br><span class="line">source1$.pipe(combineLatest(source2$))</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="316.54875" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="316.54875" y1="3.5" x2="316.54875" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(24.4097px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(121.951px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(219.104px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(316.452px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="365.17375" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="365.17375" y1="3.5" x2="365.17375" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(73.0348px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(170.479px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(267.729px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(364.979px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="365.0765" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="365.0765" y1="3.5" x2="365.0765" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(73.132px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0,0</text></g><g style="transform: translate(121.854px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1,0</text></g><g style="transform: translate(170.479px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1,1</text></g><g style="transform: translate(219.007px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2,1</text></g><g style="transform: translate(267.729px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2,2</text></g><g style="transform: translate(316.354px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3,2</text></g><g style="transform: translate(364.979px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3,3</text></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><h3 id="小缺陷-glitch"><a href="#小缺陷-glitch" class="headerlink" title="小缺陷(glitch)"></a>小缺陷(glitch)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const original$ &#x3D; timer(0, 1000);</span><br><span class="line">const source1$ &#x3D; original$.pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;a&#96;));</span><br><span class="line">const source2$ &#x3D; original$.pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;b&#96;));</span><br><span class="line">source1$.pipe(</span><br><span class="line">  combineLatest(source2$)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 774 --><g><g style="transform: translate(0.389px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">…</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(97.7362px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">…</text><text x="0" y="-18" style="font-size: 10px; dominant-baseline: text-after-edge;">×2</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(194.986px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">…</text><text x="0" y="-18" style="font-size: 10px; dominant-baseline: text-after-edge;">×2</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(292.236px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">…</text><text x="0" y="-18" style="font-size: 10px; dominant-baseline: text-after-edge;">×2</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 241 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>整个数据管道都是有original$驱动，且没一秒钟只产生一个数据，但是在combineLatest之后产生两个数据。<br>[‘0a’, ‘0b’]<br>[‘1a’, ‘0b’]<br>[‘1a’, ‘1b’]<br>[‘2a’, ‘1b’]<br>[‘2a’, ‘2b’]<br>….<br>问题的原因在于，我们理解的<strong>‘同时’不是真正的同时</strong></p><h2 id="withLatestFrom-解决glitch"><a href="#withLatestFrom-解决glitch" class="headerlink" title="withLatestFrom-解决glitch"></a>withLatestFrom-解决glitch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const original$ &#x3D; timer(0, 1000);</span><br><span class="line">const source1$ &#x3D; original$.pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;a&#96;));</span><br><span class="line">const source2$ &#x3D; original$.pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;b&#96;));</span><br><span class="line">source1$.pipe(withLatestFrom(source2$));</span><br></pre></td></tr></table></figure><p><svg width="420" height="60.203125" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="#000000" style="transition: fill 0.2s ease-in-out 0s;"/><!-- react-empty: 774 --><g><g style="transform: translate(0.1945px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0a,0b</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(97.5417px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1a,1b</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(194.889px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2a,2b</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g><g style="transform: translate(292.139px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3a,3b</text><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="transparent"/></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"><g style="transform: translate(-13.8211px, 64px) scale(1); transform-origin: 35.0156px -8px; opacity: 1; transition: opacity 0.3s ease-in-out 0s, transform 0.3s ease-in-out 0s;"><text style="dominant-baseline: text-before-edge; font-size: 12px; font-family: Arial, sans-serif; fill: rgb(255, 255, 255);"/></g></g></svg><br>[‘0a’, ‘0b’]<br>[‘1a’, ‘1b’]<br>[‘2a’, ‘2b’]<br>[‘3a’, ‘3b’]<br>原理为给下游推送的数据只能由上游Observable对象驱动。</p><h2 id="combineLatest、withLatestFrom小结"><a href="#combineLatest、withLatestFrom小结" class="headerlink" title="combineLatest、withLatestFrom小结"></a>combineLatest、withLatestFrom小结</h2><ul><li>如果要合并完全独立的Observable对象，使用combineLatest</li><li>如果要把一个Observable对象”映射”成新的数据流，同时要冲其他Observable对象获取”最新数据”，就是用withLatestFrom</li></ul><h2 id="race-胜者通吃"><a href="#race-胜者通吃" class="headerlink" title="race:胜者通吃"></a>race:胜者通吃</h2><h2 id="starWith-在数据流前添加内容"><a href="#starWith-在数据流前添加内容" class="headerlink" title="starWith:在数据流前添加内容"></a>starWith:在数据流前添加内容</h2><h2 id="forkJoin"><a href="#forkJoin" class="headerlink" title="forkJoin"></a>forkJoin</h2><p>forkJoin就是RxJS届的Promise.all,等待所有输入的Promise对象成功之后把结果合并。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source1$ &#x3D; interval(1000).pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;a&#96;), take(1))</span><br><span class="line">const source2$ &#x3D; interval(1000).pipe(map(x &#x3D;&gt; &#96;$&#123;x&#125;b&#96;), take(3))</span><br><span class="line">const forkJoin$ &#x3D; forkJoin(source1$, source2$)</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="97.4445" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="97.4445" y1="3.5" x2="97.4445" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(97.3472px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0a</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="292.139" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="292.139" y1="3.5" x2="292.139" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(97.7362px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0b</text></g><g style="transform: translate(194.694px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1b</text></g><g style="transform: translate(291.945px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2b</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg></p><p>需要注意，forkJoin会吧所有输入Observable对象产生的<strong><em>最后一个</em></strong>数据<strong><em>合并</em></strong>成给下游唯一的数据。</p><h2 id="高阶Observable"><a href="#高阶Observable" class="headerlink" title="高阶Observable"></a>高阶Observable</h2><p>本质：以函数为参数，返回结果为函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const highOrder$ &#x3D; interval(1000).pipe(</span><br><span class="line">  take(2), map(x &#x3D;&gt; interval(1500).pipe(</span><br><span class="line">    map(y &#x3D;&gt; &#96;$&#123;x&#125;:$&#123;y&#125;&#96;),</span><br><span class="line">    take(2)</span><br><span class="line">    )))</span><br></pre></td></tr></table></figure><p><svg width="420" height="167" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="86.02783333333333" y1="37" x2="86.02783333333333" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="150.79633333333334" y1="37" x2="150.79633333333334" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="129.99083333333334" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="129.99083333333334" y1="3.5" x2="129.99083333333334" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(65.0278px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(129.796px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 1105 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 1253 --><g transform="translate(21, 0)"><line x1="65.02783333333333" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="65.02783333333333" y1="26" x2="259.91683333333333" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="259.91683333333333" y1="3.5" x2="259.91683333333333" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(162.537px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:0</text></g><g style="transform: translate(259.787px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:1</text></g></g><!-- react-empty: 1260 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 1265 --><g transform="translate(21, 0)"><line x1="129.79633333333334" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="129.79633333333334" y1="26" x2="324.75016666666664" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.75016666666664" y1="3.5" x2="324.75016666666664" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(227.371px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:0</text></g><g style="transform: translate(324.685px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:1</text></g></g><!-- react-empty: 1272 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>从弹珠图上可以观察到，高阶Observable完结，不代表内部Observable完结。<br>其价值为用管理数据的方式来管理多个Observable对象。</p><h3 id="操作高阶Observable的合并类操作符"><a href="#操作高阶Observable的合并类操作符" class="headerlink" title="操作高阶Observable的合并类操作符"></a>操作高阶Observable的合并类操作符</h3><ul><li>concatAll</li><li>mergeAll</li><li>zipAll</li><li>combineAll<h3 id="进化的高阶Observable处理"><a href="#进化的高阶Observable处理" class="headerlink" title="进化的高阶Observable处理"></a>进化的高阶Observable处理</h3><h4 id="switch-切换输入Observable"><a href="#switch-切换输入Observable" class="headerlink" title="switch:切换输入Observable"></a>switch:切换输入Observable</h4>总是切换到最新内部Observable对象获取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const highOrder$ &#x3D; interval(1000).pipe(</span><br><span class="line">  take(2), map(x &#x3D;&gt; interval(1500).pipe(</span><br><span class="line">    map(y &#x3D;&gt; &#96;$&#123;x&#125;:$&#123;y&#125;&#96;),</span><br><span class="line">    take(2)</span><br><span class="line">    )))</span><br><span class="line">   highOrder$.pipe(switch());</span><br></pre></td></tr></table></figure><svg width="420" height="167" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="85.89816666666667" y1="37" x2="85.89816666666667" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="150.7315" y1="37" x2="150.7315" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="129.926" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="129.92600000000002" y1="3.5" x2="129.92600000000002" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(64.8982px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(129.732px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 1105 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 1301 --><g transform="translate(21, 0)"><line x1="64.89816666666667" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="64.89816666666667" y1="26" x2="259.7871666666667" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="259.7871666666666" y1="3.5" x2="259.7871666666666" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(162.472px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:0</text></g><g style="transform: translate(259.722px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:1</text></g></g><!-- react-empty: 1308 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 1313 --><g transform="translate(21, 0)"><line x1="129.7315" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="129.7315" y1="26" x2="324.55566666666664" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.5556666666667" y1="3.5" x2="324.5556666666667" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(227.176px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:0</text></g><g style="transform: translate(324.491px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:1</text></g></g><!-- react-empty: 1320 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="324.426" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="324.426" y1="3.5" x2="324.426" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(227.111px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1:0</text></g><g style="transform: translate(324.296px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1:1</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><h4 id="exhaust-耗尽"><a href="#exhaust-耗尽" class="headerlink" title="exhaust:耗尽"></a>exhaust:耗尽</h4>exhaust操作符的意思为：在耗尽当前内部Observable对象之前不会切换到写一个内部Observable对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const ho$ &#x3D; interval(1000).pipe(</span><br><span class="line">  take(3),</span><br><span class="line">  map(x &#x3D;&gt; interval(700).pipe(</span><br><span class="line">    map(y &#x3D;&gt; &#96;$&#123;x&#125;:$&#123;y&#125;&#96;),</span><br><span class="line">    take(2)</span><br><span class="line">  ))</span><br><span class="line">)</span><br><span class="line">ho$.pipe(exhaust())</span><br></pre></td></tr></table></figure><svg width="420" height="219" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><line x1="98.9556" y1="37" x2="98.9556" y2="89" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="176.7556" y1="37" x2="176.7556" y2="141" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><line x1="254.6334" y1="37" x2="254.6334" y2="193" stroke="#767676" stroke-width="1" stroke-dasharray="3,3"/><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="233.789" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="233.789" y1="3.5" x2="233.789" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(77.9556px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(155.756px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g><g style="transform: translate(233.633px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="0" stroke="#000000" fill="#767676"/></g></g><!-- react-empty: 1105 --></g></g><g transform="translate(0, 63)"><!-- react-empty: 1408 --><g transform="translate(21, 0)"><line x1="77.9556" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="77.9556" y1="26" x2="187.2646" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="187.2646" y1="3.5" x2="187.2646" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(132.649px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:0</text></g><g style="transform: translate(187.187px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">0:1</text></g></g><!-- react-empty: 1415 --></g></g><g transform="translate(0, 115)"><!-- react-empty: 1423 --><g transform="translate(21, 0)"><line x1="155.7556" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="155.7556" y1="26" x2="265.0646" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="265.0646" y1="3.5" x2="265.0646" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(210.527px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:0</text></g><g style="transform: translate(264.909px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">1:1</text></g></g><!-- react-empty: 1430 --></g></g><g transform="translate(0, 167)"><!-- react-empty: 1442 --><g transform="translate(21, 0)"><line x1="233.6334" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(118, 118, 118, 0.2)" style="shape-rendering: crispedges;"/><line x1="233.6334" y1="26" x2="342.8646" y2="26" stroke-width="2" stroke="#767676" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(118, 118, 118, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="342.8646" y1="3.5" x2="342.8646" y2="48.5" stroke-width="2" stroke="#767676" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(288.327px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">2:0</text></g><g style="transform: translate(342.787px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#767676" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(118, 118, 118); dominant-baseline: central;">2:1</text></g></g><!-- react-empty: 1449 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="342.6312" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="342.63120000000004" y1="3.5" x2="342.63120000000004" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(132.493px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0:0</text></g><g style="transform: translate(186.876px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0:1</text></g><g style="transform: translate(288.093px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2:0</text></g><g style="transform: translate(342.476px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2:1</text></g></g><!-- react-empty: 1105 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>从图可以总结出来<br>exhaust输出数据流 = 时间 + 生存能力:)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解谜RxJS操作符-创建</title>
      <link href="/2020/04/25/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%88%9B%E5%BB%BA/"/>
      <url>/2020/04/25/%E8%A7%A3%E8%B0%9CRxJS%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="创建操作符"><a href="#创建操作符" class="headerlink" title="创建操作符"></a>创建操作符</h2><table><thead><tr><th align="center">适用操作符</th><th align="center">功能需求</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">直接操作观察者</td></tr><tr><td align="center">of</td><td align="center">根据有限的数据产生同步数据流</td></tr><tr><td align="center">range</td><td align="center">产生一个数值范围内的数据</td></tr><tr><td align="center">generate</td><td align="center">以循环方式产生数据</td></tr><tr><td align="center">repeat | repeatWhen</td><td align="center">重复产生数据流中的数据</td></tr><tr><td align="center">empty</td><td align="center">产生空数据</td></tr><tr><td align="center">throw</td><td align="center">产生直接出错的数据流</td></tr><tr><td align="center">never</td><td align="center">产生永不完结的数据流</td></tr><tr><td align="center">interval|timer</td><td align="center">间隔给定时间持续产生数据</td></tr><tr><td align="center">from</td><td align="center">从数组等枚举类型数据产生数据流</td></tr><tr><td align="center">fromPromise</td><td align="center">从Promise对象产生数据流</td></tr><tr><td align="center">fromEvent</td><td align="center">从外部事件对象产生数据流</td></tr><tr><td align="center">ajax</td><td align="center">从Ajax请求结果产生数据流</td></tr><tr><td align="center">defer</td><td align="center">延迟产生数据流</td></tr></tbody></table><h2 id="repeat-重复数据的数据流"><a href="#repeat-重复数据的数据流" class="headerlink" title="repeat:重复数据的数据流"></a>repeat:重复数据的数据流</h2><p>repeat是一个实例操作符,区别于静态操作符。<br>repeat的”重复功能”依赖于上游observable的完结时机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const source$ &#x3D; Observable.create(observer&#x3D;&gt;&#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; observer.next(1), 1000);</span><br><span class="line">  setTimeout(() &#x3D;&gt; observer.next(2), 2000);</span><br><span class="line">  setTimeout(() &#x3D;&gt; observer.next(3), 3000);</span><br><span class="line">  setTimeout(() &#x3D;&gt; observer.complete(), 4000);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const repeated$ &#x3D; source$.repeat(2);</span><br><span class="line"></span><br><span class="line">repeated$.subscribe(</span><br><span class="line">  console.log,</span><br><span class="line">  null,</span><br><span class="line">  () &#x3D;&gt; console.log(&#39;completed&#39;);</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 10 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="311.2778" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="311.2778" y1="11" x2="311.2778" y2="41" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(77.8778px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(155.756px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(233.478px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g></g><!-- react-empty: 17 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br><strong><em>如果要重复3次,observer.complete()是关键。</em></strong></p><h3 id="v4-vs-v5"><a href="#v4-vs-v5" class="headerlink" title="v4 vs v5"></a>v4 vs v5</h3><p>v4中repeat是一个静态操作符，接受两个参数，一个是需要重复的元素，另一个参数为重复的次数，功能很受限例如：<br><code>const $ = Rx.Observable.repeat(1,10);</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解谜RxJS-入门</title>
      <link href="/2020/04/25/%E8%A7%A3%E8%B0%9CRxJS-%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/25/%E8%A7%A3%E8%B0%9CRxJS-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>RxJS 可以写出更短更内聚的代码，但是编写和理解的难度较大；Callback 版本虽然朴实无华，但是便于编写以及理解，可维护性更好。</p><h2 id="Reactive-Extension"><a href="#Reactive-Extension" class="headerlink" title="Reactive Extension"></a>Reactive Extension</h2><p><img src="/2020/04/25/%E8%A7%A3%E8%B0%9CRxJS-%E5%85%A5%E9%97%A8/assembly-line.jpeg" alt="assembly-line">  </p><blockquote><p>An API for asynchronous programming with observable streams</p></blockquote><p>Reactive Extension(也叫ReactiveX),指的事实践响应式编程的一套工具，Rx扩展了那些不支持响应式编程的语言的功能，让开发者可以更方便地以函数式和响应式风格来开发应用。<br>函数响应式编程(Functional Reactive Programming)的优势</p><ul><li>数据流抽象了很多现实问题</li><li>擅长处理一步操作</li><li>把复杂问题分解成简单问题</li></ul><h2 id="理解Observable与Observer"><a href="#理解Observable与Observer" class="headerlink" title="理解Observable与Observer"></a>理解Observable与Observer</h2><p>顾名思义，Observable就是“可被观察者（对象）”，Observer为“观察者”。<br>两者之间的桥梁为subscribe.为了让两者之间可以互动，Observable实现了下面两种设计模式：</p><ul><li>观察者模式(Observer Pattern)</li><li>迭代器模式(Iterator Pattern)</li></ul><p><strong>Observable = Publisher + Iterator</strong></p><h2 id="Hot-Observable-与-Cold-Observable"><a href="#Hot-Observable-与-Cold-Observable" class="headerlink" title="Hot Observable 与 Cold Observable"></a>Hot Observable 与 Cold Observable</h2><blockquote><p>Think of a hot Observable as a radio station. All of the listeners that are listening to it at this moment listen to the same song.<br>A cold Observable is a music CD. Many people can buy it and listen to it independently.<br>—Nickolay Tsvetinov</p></blockquote><h3 id="Hot-Observable"><a href="#Hot-Observable" class="headerlink" title="Hot Observable"></a>Hot Observable</h3><p>一旦Hot Observable被创建了，不管有没有订阅者，它们都会开始发送数据。<br>相同时间开始订阅的订阅者会得到同样的数据。<br>Cold Observable的创建就是一般的创建方法。API中提供了相关的方法能将Cold Observable转化为Hot Observable。</p><h3 id="Cold-Observable"><a href="#Cold-Observable" class="headerlink" title="Cold Observable"></a>Cold Observable</h3><p>所有的Observable默认都是Cold Obserable。这就是说我们使用诸如Observable.create()或者Observable.fromArray()这类的方法所创建出来的Observable都是Cold Observable。<br>任何订阅Cold Observable的订阅者都会接收到独立的数据流。<br>如果没有订阅者订阅，它就什么事情也不会做，是被动的。</p><h2 id="弹珠图-Marbles-Diagram"><a href="#弹珠图-Marbles-Diagram" class="headerlink" title="弹珠图(Marbles Diagram)"></a>弹珠图(Marbles Diagram)</h2><p><svg width="420" height="63" style="display: block; font-size: 14px; font-family: Arial, sans-serif; dominant-baseline: central; text-anchor: middle; cursor: default; user-select: none;"><g transform="translate(0, 11)"><!-- react-empty: 475 --><g transform="translate(21, 0)"><line x1="0" y1="26" x2="389" y2="26" stroke-width="2" stroke="rgba(0, 0, 0, 0.2)" style="shape-rendering: crispedges;"/><line x1="0" y1="26" x2="311.2778" y2="26" stroke-width="2" stroke="#000000" style="shape-rendering: crispedges;"/><path transform="translate(389, 21)" d="M0 0 L10 5 L0 10 z" fill="rgba(0, 0, 0, 0.2)" style="transition: fill 0.2s ease-in-out 0s;"/><line x1="311.2778" y1="3.5" x2="311.2778" y2="48.5" stroke-width="2" stroke="#000000" style="opacity: 1; transition: opacity 0.5s ease-in-out 0s;"/><g><g style="transform: translate(77.8778px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">0</text></g><g style="transform: translate(155.6px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">1</text></g><g style="transform: translate(233.4px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">2</text></g><g style="transform: translate(311.2px, 26px) scale(1); transition: transform 0.5s ease-in-out 0s;"><circle cx="0" cy="0" r="15" stroke-width="2" stroke="#000000" fill="#ffffff"/><text x="0" y="0" style="fill: rgb(0, 0, 0); dominant-baseline: central;">3</text></g></g><!-- react-empty: 482 --></g></g><g style="text-anchor: start; dominant-baseline: text-before-edge;"/></svg><br>RxJS中的Observable代表一个数据流.</p><ul><li>弹珠:每一个吐出来的数据</li><li>间隔:数据与数据之间的时间间隔</li><li>竖杠符号(|):代表数据流的完结(complete)</li><li>x符号:代表数据流中的异常(error)</li></ul><h2 id="弹珠图工具"><a href="#弹珠图工具" class="headerlink" title="弹珠图工具"></a>弹珠图工具</h2><p><a href="http://rxmarbles.com" target="_blank" rel="noopener">http://rxmarbles.com</a><br><a href="https://rxviz.com" target="_blank" rel="noopener">https://rxviz.com</a><br>在学习过程中借助工具能够加深对RxJS的理解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RxJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubectl命令行接口</title>
      <link href="/2020/04/24/kubectl%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/04/24/kubectl%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>kubectl作为客户端的CLI工具，可以让用户通过命令对kubernetes集群进行操作。</p><h2 id="kubectl语法"><a href="#kubectl语法" class="headerlink" title="kubectl语法"></a>kubectl语法</h2><p><code>$ kubectl [command] [type] [name] [flags]</code></p><ul><li>command: 子命令，用于操作kubernetes集群资源对象的命令, create、delete、describe、get、apply、etc.</li><li>type: 资源对象的类型。</li><li>name: 资源对象的名称。</li><li>flags: 子命令可选参数。</li></ul><h3 id="一条命令同时对多个资源对象进行操作"><a href="#一条命令同时对多个资源对象进行操作" class="headerlink" title="一条命令同时对多个资源对象进行操作"></a>一条命令同时对多个资源对象进行操作</h3><ul><li><code>$ kubectl get pods pod1 pod2</code></li><li><code>$ kubectl get pod/pod1 rc/rc1</code></li><li><code>$ kubectl create -f pod1.yaml -f rc1.yaml -f server1.yaml</code></li></ul><h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><ul><li>创建资源对象<ul><li><code>$ kubectl create -f my-service.yaml -f my-rc.yaml</code></li><li><code>$ kubectl create -f &lt;directory&gt;</code></li></ul></li><li>查看资源对象<ul><li><code>$ kubectl get pods</code></li><li><code>$ kubectl get rc,service</code></li></ul></li><li>描述资源对象<ul><li><code>$ kubectl describe nodes &lt;node-name&gt;</code></li><li><code>$ kubectl describe pods/&lt;pod-name&gt;</code></li><li><code>$ kubectl describe pods &lt;rc-name&gt;</code></li></ul></li><li>删除资源对象<ul><li><code>$ kubectl delete -f pod.yaml</code></li><li><code>$ kubectl delete pods,services -l name=&lt;label-name&gt;</code></li><li><code>$ kubectl delete pods --all</code></li></ul></li><li>执行容器命令<ul><li><code>$ kubectl exec &lt;pod-name&gt; date</code></li><li><code>$ kubectl exec &lt;pod-name&gt; -c &lt;container-name&gt; date</code></li><li><code>$ kubectl exec &lt;pod-name&gt; -c &lt;container-name&gt; /bin/bash</code></li></ul></li><li>查看容器日志<ul><li><code>$ kubectl logs &lt;pod-name&gt;</code></li><li><code>$ kubectl logs -f &lt;pod-name&gt; -c &lt;container-name&gt;</code></li></ul></li><li>创建/更新资源对象<ul><li><code>$ kubectl apply -f app.yaml</code></li></ul></li><li>在线编辑运行中的资源对象<ul><li><code>$ kubectl edit deploy nginx</code></li></ul></li><li>将Pod的开放端口映射到本地<ul><li><code>$ kubectl port-forward --address 0.0.0.0 pod/nginx-6ddbbc47fb-sfdcv 8888:80</code></li></ul></li><li>在Pod和本地之间复制文件<ul><li><code>$ kubectl cp nginx-6ddbbc47fb-sfdcv:/etc/fstab /tmp</code></li></ul></li><li>资源对象的标签设置<ul><li><code>$ kubectl label namespace default testing=true</code></li></ul></li><li>检查可用的API资源类型列表<ul><li><code>$ kubectl api-resources</code></li></ul></li></ul><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p><code>$ kubectl help</code></br><br>在日常使用中多使用help来寻求帮助:)</p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
